// Function to compute integer exponentiation (n ^ exponent)
function powi(n: int, exponent: int) -> int {
    let result: int = 1;

    // Loop exponent times, multiplying result by n each iteration
    for (let i: int = 0; i < exponent; i++) {
        result *= n;    
    }

    return result;
}

// Function to compute floating-point exponentiation (f ^ exponent)
function powf(f: float, exponent: int) -> float {
    let result: float = 1.0;

    // Loop exponent times, multiplying result by f each iteration
    for (let i: int = 0; i < exponent; i++) {
        result *= f;   
    }

    return result;
}

// Function to compute the absolute value of an integer
function absi(n: int) -> int {
    // If n is negative, return its positive counterpart
    if n < 0 {
        return -n;
    }

    return n;
}

// Function to compute the absolute value of a floating-point number
function absf(f: float) -> float {
    // If f is negative, return its positive counterpart
    if f < 0.0 {
        return -f;    
    }    

    return f;
}
